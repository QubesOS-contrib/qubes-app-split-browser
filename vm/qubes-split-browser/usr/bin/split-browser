#!/bin/bash
set -e -u -o pipefail
shopt -s inherit_errexit nullglob

# shellcheck disable=SC1090
for f in {,/usr/local}/etc/split-browser/*.bash; do source "$f"; done
export SB_CMD_INPUT="${SB_CMD_INPUT:-/run/split-browser/cmd-$$}"


# Parse command-line arguments

args=()
cli_prefs=()

for arg; do
    case "$arg" in
        -h|--help)
            exec cat <<END

  Usage:  split-browser [--safest] [--pref=<line>...] [<argument>...]


  --safest       set Tor Browser's Security Level to Safest; equivalent to
                 --pref='pref("extensions.torbutton.security_slider", 1);'

  --pref=<line>  additional browser preference line, appended after those
                 stored in /etc/split-browser/prefs/*.js and
                 /usr/local/etc/split-browser/prefs/*.js

  <argument>     e.g. a URL; passed to the browser when starting (but not
                 when restarting due to Ctrl-Shift-u)

END
        ;;
        --safest|--high)  # --high is deprecated
            cli_prefs+=( 'pref("extensions.torbutton.security_slider", 1);' )
        ;;
        --pref=*)
            cli_prefs+=( "${arg#*=}" )
        ;;
        *)
            args+=( "$arg" )
        ;;
    esac
done


# When the DisposableVM sends us a request, the page URL and title are supplied
# in two versions each: printable ASCII, and UTF-8. Printable ASCII *URLs* use
# Punycode IDNs and percent-encoding. Printable ASCII *titles* actually come in
# as UTF-8 normalized to NFKD (so that there are slightly fewer illegal bytes
# to replace).

if [[ ${SB_CHARSET-} == utf-8 ]]; then
    first_page_info_field=4
else
    SB_CHARSET=ascii
    first_page_info_field=2
fi

sanitize_utf-8() {  # replace null byte with _; then validate as UTF-8
    LC_ALL=C stdbuf -oL tr '\0' _ |
    LC_ALL=C PYTHONIOENCODING=utf-8:strict \
    python3 -Suc $'import sys\nfor l in sys.stdin: sys.stdout.write(l)'
}

sanitize_ascii() {  # replace any byte with _ but printable ASCII, tab, newline
    LC_ALL=C stdbuf -oL tr -c '\040-\176\t\n' _
}


# Launch via qubes.VMShell in the DisposableVM, because a straightforward
# 'qrexec-client-vm @dispvm split-browser-disp' call would require the user to
# manually create a policy in dom0. Transition to split-browser-disp with the
# trick described in /usr/lib/qubes/qrun-in-vm (not reused here, because it
# doesn't preserve exit status).
#
# Sanitize stdout and handle those requests (one per line), e.g. to get a login
# credential. The handler might then send commands into the input FIFO with
# split-browser-cmd. (This is essentially a crappy bidirectional RPC system
# implemented *inside* a qrexec RPC call's data streams. It would be much nicer
# to do multiple qrexec calls back and forth, but that requires lots of policy
# configuration for each persistent VM.) Also strictly sanitize stderr and
# distinguish it with a prefix.

dispvm() (
    exec {saved_stdout_fd}>&1 >&2
    trap 'rm -f -- "$SB_CMD_INPUT"{.tmp,}' EXIT
    mkfifo -- "$SB_CMD_INPUT".tmp
    exec {cmd_input_fd}<>"$SB_CMD_INPUT".tmp

    d=/etc/qubes-rpc
    bash_line="PATH=/usr/local$d:$d:\$PATH exec split-browser-disp"
    printf '%s\n' "$bash_line" "$@" >&"$cmd_input_fd"  # 64 KB pipe capacity
    mv -- "$SB_CMD_INPUT"{.tmp,}

    (
        trap 'wait $! || exit $?' EXIT

        { qrexec-client-vm -T @dispvm qubes.VMShell; } \
        <&"$cmd_input_fd" 2> >(sanitize_ascii | sed -u 's/^/disp: /' >&2)
    ) |
    sanitize_"$SB_CHARSET" |
    while IFS=$'\t' read -r -a req; do
        case "${req[0]}" in
            bookmark|login)
                page_info=( "${req[@]:$first_page_info_field:2}" )
                split-browser-"${req[0]}" "${req[1]}" "${page_info[@]}" &
            ;;
            restart)
                echo x >&"$saved_stdout_fd"
            ;;
        esac
    done
)


# Main loop: Configure and open the disposable browser. After clean shutdown,
# do it again (if restart was requested).

while :; do
    config_prefs=()
    for f in {,/usr/local}/etc/split-browser/prefs/*.js; do
        readarray -t -O ${#config_prefs[@]} config_prefs <"$f"
    done
    setup_cmd=( setup "${config_prefs[@]}" "${cli_prefs[@]}" )
    master_cmd=( master "${args[@]}" )
    args=()  # on restart, don't load given URLs again

    IFS_bak=$IFS
    IFS=$'\t'
    init=( "${setup_cmd[*]}" "${master_cmd[*]}" )
    IFS=$IFS_bak

    restart=$(dispvm "${init[@]}")
    [[ $restart ]] || exit 0
done
