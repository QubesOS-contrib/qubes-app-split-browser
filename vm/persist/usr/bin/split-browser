#!/bin/bash
set -e -o pipefail
shopt -s nullglob

[[ -t 2 ]] || exec 2> >(systemd-cat -t split-browser --level-prefix=no)
for f in {,/usr/local}/etc/split-browser/persist/*.bash; do source "$f"; done
export SB_CMD_INPUT="${SB_CMD_INPUT:-$SB_CMD_DIR/$$}"


# Parse command-line arguments

args=()
cli_prefs=()

for arg; do
    case "$arg" in
        -h|--help)
            exec cat <<END

  Usage:  split-browser [--safest] [--pref=<line>...] [<argument>...]


  --safest       set Tor Browser's Security Level to Safest; equivalent to
                 --pref='pref("extensions.torbutton.security_slider", 1);'

  --pref=<line>  additional browser preference line, appended after those
                 stored in /etc/split-browser/persist/prefs/*.js and
                 /usr/local/etc/split-browser/persist/prefs/*.js

  <argument>     e.g. a URL; passed to the browser when starting (but not
                 when restarting due to Ctrl-Shift-u)

END
        ;;
        --safest|--high)  # --high is deprecated
            cli_prefs+=( 'pref("extensions.torbutton.security_slider", 1);' )
        ;;
        --pref=*)
            cli_prefs+=( "${arg#*=}" )
        ;;
        *)
            args+=( "$arg" )
        ;;
    esac
done


# When the DisposableVM sends us a request, the page URL and title are supplied
# in two versions each: printable ASCII, and UTF-8. Printable ASCII *URLs* use
# Punycode IDNs and percent-encoding. Printable ASCII *titles* actually come in
# as UTF-8 normalized to NFKD (so that there are slightly fewer illegal bytes
# to replace).

if [[ $SB_CHARSET == utf-8 ]]; then
    sanitize() {
        stdbuf -oL tr '\0' _ |
        PYTHONIOENCODING=utf-8:strict \
        python3 -uc $'import sys\nfor l in sys.stdin: sys.stdout.write(l)'
    }
    first_page_field=4
else  # printable ASCII
    sanitize() {
        stdbuf -oL tr -c '\040-\176\t\n' _
    }
    first_page_field=2
fi


# Launch via qubes.VMShell in the DisposableVM, because a straightforward
# 'qrexec-client-vm @dispvm splitBrowser' call would require the user to
# manually create a policy in dom0. Transition to splitBrowser with the trick
# described in /usr/lib/qubes/qrun-in-vm (not reused here, because it doesn't
# preserve exit status).
#
# Sanitize stdout and handle those requests (one per line), e.g. to get a login
# credential. The handler might then send commands into the input FIFO with
# split-browser-cmd. (This is essentially a crappy bidirectional RPC system
# implemented *inside* a qrexec RPC call's data streams. It would be much nicer
# to do multiple qrexec calls back and forth, but that requires lots of policy
# configuration for each persistent VM.)

dispvm() (
    sh="PATH=/usr/local/etc/qubes-rpc:/etc/qubes-rpc:\$PATH exec splitBrowser"

    trap 'rm -f -- "$SB_CMD_INPUT"{.tmp,}' EXIT &&
    mkfifo -- "$SB_CMD_INPUT".tmp &&
    exec {input_fd}<>"$SB_CMD_INPUT".tmp &&
    printf '%s\n' "$sh" "$@" >&"$input_fd" &&  # 64 KB pipe capacity is plenty
    mv -- "$SB_CMD_INPUT"{.tmp,} ||
    return

    qrexec-client-vm -T @dispvm qubes.VMShell <&"$input_fd" |
    LC_ALL=C sanitize |
    (
        restart=
        while IFS=$'\t' read -r -a req; do
            case "${req[0]}" in
                bookmark|login)
                    split-browser-"${req[0]}" "${req[1]}" \
                    "${req[@]:$first_page_field:2}" &
                ;;
                restart)
                    restart=x
                ;;
            esac
        done
        [[ $restart ]] || exit 111
    ) || for s in "${PIPESTATUS[@]}"; do [[ $s == 0 ]] || return "$s"; done
)


# Main loop: Configure and open the disposable browser. After clean shutdown,
# do it again (if restart was requested).

while :; do
    config_prefs=()
    for f in {,/usr/local}/etc/split-browser/persist/prefs/*.js; do
        readarray -t -O ${#config_prefs[@]} config_prefs <"$f"
    done
    setup_cmd=( setup "${config_prefs[@]}" "${cli_prefs[@]}" )
    master_cmd=( master "${args[@]}" )
    args=()  # on restart, don't load given URLs again

    IFS_bak=$IFS
    IFS=$'\t'
    init=( "${setup_cmd[*]}" "${master_cmd[*]}" )
    IFS=$IFS_bak

    dispvm "${init[@]}" || exit $(( $? == 111 ? 0 : 1 ))
done
