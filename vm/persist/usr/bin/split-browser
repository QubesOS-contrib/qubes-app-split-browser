#!/bin/bash
set -e -o pipefail
shopt -s nullglob

for f in {,/usr/local}/etc/split-browser/persist/*.bash; do source "$f"; done

[[ -t 2 ]] || exec 2> >(systemd-cat -t split-browser --level-prefix=no)
: ${SB_CMD_SOCKET:=$SB_CMD_DIR/$$}
export SB_CMD_SOCKET


# Parse command-line arguments and collect the Firefox preferences that will be
# transmitted to the DisposableVM.

readarray -t prefs < \
    <(cat {,/usr/local}/etc/split-browser/persist/prefs.js.d/*.js /dev/null)
args=()

for arg; do
    case "$arg" in
        -h|--help)
            exec cat <<END

  Usage:  split-browser [--safest] [--pref=<line>...] [<argument>...]


  --safest       set Torbutton's Security Slider to Safest; equivalent to
  --high         --pref='user_pref("extensions.torbutton.security_slider", 1);'

  --pref=<line>  additional Firefox prefs.js setting, appended after those
                 stored in /etc/split-browser/persist/prefs.js.d/*.js and
                 /usr/local/etc/split-browser/persist/prefs.js.d/*.js

  <argument>     e.g. a URL; passed to Firefox when starting (but not when
                 restarting due to Ctrl-Shift-u)

END
        ;;
        --safest|--high)
            prefs+=( 'user_pref("extensions.torbutton.security_slider", 1);' )
        ;;
        --pref=*)
            prefs+=( "${arg#*=}" )
        ;;
        *)
            args+=( "$arg" )
        ;;
    esac
done


# When the DisposableVM sends us a request, the page URL and title are supplied
# in two versions each: printable ASCII, and UTF-8. Printable ASCII *URLs* use
# Punycode IDNs and percent-encoding. Printable ASCII *titles* actually come in
# as UTF-8 normalized to NFKD (so that there are slightly fewer illegal bytes
# to replace).

if [[ $SB_CHARSET == utf-8 ]]; then
    sanitize() {
        stdbuf -oL tr '\0' _ |
        PYTHONIOENCODING=utf-8:strict \
        python3 -uc $'import sys\nfor l in sys.stdin: sys.stdout.write(l)'
    }
    first_page_field=4
else  # printable ASCII
    sanitize() {
        stdbuf -oL tr -c '\040-\176\t\n' _
    }
    first_page_field=2
fi


# Main loop: Start/restart the browser DisposableVM. Handle incoming requests
# from the browser. Send commands to the browser, using socat to serialize
# overlapping commands. (This is essentially a crappy bidirectional RPC system
# implemented *inside* a qrexec RPC call's data stream... But getting rid of it
# will require some changes to qrexec-policy etc.)

(
    echo $BASHPID
    exec socat "UNIX-LISTEN:$SB_CMD_SOCKET,fork,max-children=1" STDIO
) | {
    read socat_pid
    while :; do
        split-browser-cmd setup "${prefs[@]}"
        split-browser-cmd master sb_firefox "${args[@]}"
        args=()  # on restart, don't load given URLs again

        # - 'qrexec-client-vm \$dispvm splitBrowser' would need a policy file
        # - 'qvm-run-vm' wrapper is named 'qvm-run' in R3.2

        qrexec-client-vm \$dispvm qubes.VMShell+WaitForSession \
        /usr/lib/qubes/qrun-in-vm 'exec /etc/qubes-rpc/splitBrowser' |
        LC_ALL=C sanitize | {
            restart=

            while IFS=$'\t' read -r -a req; do
                case "${req[0]}" in
                    bookmark|login)
                        split-browser-"${req[0]}" "${req[1]}" \
                        "${req[@]:$first_page_field:2}" &
                    ;;
                    restart)
                        restart=x
                    ;;
                esac
            done

            if [[ ! $restart ]]; then
                kill "$socat_pid"
                exit 111
            fi
        } || exit
    done
} ||
[[ ${PIPESTATUS[0]} == 143 && ${PIPESTATUS[1]} == 111 ]]
